<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Treball de Fi de Grau: Referència de la Classe Photon.Chat.ChatClient</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Treball de Fi de Grau
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">Documentació pel treball de final de grau. Implementació d&#39;una base per un joc de gènere MOBA multijugador en línia.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generat per Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Cerca','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Cerca');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('class_photon_1_1_chat_1_1_chat_client.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Mètodes públics</a> &#124;
<a href="#pub-attribs">Atributs Públics</a> &#124;
<a href="#pub-static-attribs">Atributs Públics Estàtics</a> &#124;
<a href="#properties">Propietats</a> &#124;
<a href="#pri-methods">Mètodes Privats</a> &#124;
<a href="#pri-attribs">Atributs Privats</a> &#124;
<a href="#pri-static-attribs">Atributs Privats Estàtics</a> &#124;
<a href="class_photon_1_1_chat_1_1_chat_client-members.xhtml">Llista de tots els membres</a>  </div>
  <div class="headertitle">
<div class="title">Referència de la Classe Photon.Chat.ChatClient</div>  </div>
</div><!--header-->
<div class="contents">

<p>Central class of the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> API to connect, handle channels and messages.  
 <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#details">Més...</a></p>
<div class="dynheader">
Diagrama d'Herència per a Photon.Chat.ChatClient:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_photon_1_1_chat_1_1_chat_client.png" alt=""/>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Mètodes públics</h2></td></tr>
<tr class="memitem:a9319494267567de368f56a737b643634"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9319494267567de368f56a737b643634">CanChatInChannel</a> (string channelName)</td></tr>
<tr class="memdesc:a9319494267567de368f56a737b643634"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if this client is ready to publish messages inside a public channel.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9319494267567de368f56a737b643634">Més...</a><br /></td></tr>
<tr class="separator:a9319494267567de368f56a737b643634"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab42b0bad653802e35481597091cc4c57"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ab42b0bad653802e35481597091cc4c57">ChatClient</a> (<a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml">IChatClientListener</a> <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aee0af5e31e332be4b4f3bb723f558aa9">listener</a>, ConnectionProtocol protocol=ConnectionProtocol.Udp)</td></tr>
<tr class="memdesc:ab42b0bad653802e35481597091cc4c57"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> client constructor.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#ab42b0bad653802e35481597091cc4c57">Més...</a><br /></td></tr>
<tr class="separator:ab42b0bad653802e35481597091cc4c57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55a715b3029d0f17c1eb537960c7aa5b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a55a715b3029d0f17c1eb537960c7aa5b">ConnectUsingSettings</a> (<a class="el" href="class_photon_1_1_chat_1_1_chat_app_settings.xhtml">ChatAppSettings</a> appSettings)</td></tr>
<tr class="separator:a55a715b3029d0f17c1eb537960c7aa5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26295d698e9cea35b3e6411623c54ded"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a26295d698e9cea35b3e6411623c54ded">Connect</a> (string appId, string appVersion, <a class="el" href="class_photon_1_1_chat_1_1_authentication_values.xhtml">AuthenticationValues</a> authValues)</td></tr>
<tr class="memdesc:a26295d698e9cea35b3e6411623c54ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Connects this client to the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Cloud service, which will also authenticate the user (and set a UserId).  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a26295d698e9cea35b3e6411623c54ded">Més...</a><br /></td></tr>
<tr class="separator:a26295d698e9cea35b3e6411623c54ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8f7f17505875382395e1cc898c6ca61"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ae8f7f17505875382395e1cc898c6ca61">ConnectAndSetStatus</a> (string appId, string appVersion, <a class="el" href="class_photon_1_1_chat_1_1_authentication_values.xhtml">AuthenticationValues</a> authValues, int status=<a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml#a5dd001713c1f5f001beaf278fa3978bb">ChatUserStatus.Online</a>, object message=null)</td></tr>
<tr class="memdesc:ae8f7f17505875382395e1cc898c6ca61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Connects this client to the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Cloud service, which will also authenticate the user (and set a UserId).  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#ae8f7f17505875382395e1cc898c6ca61">Més...</a><br /></td></tr>
<tr class="separator:ae8f7f17505875382395e1cc898c6ca61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa08129ee3ee957c825e0a91a61e97993"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aa08129ee3ee957c825e0a91a61e97993">Service</a> ()</td></tr>
<tr class="memdesc:aa08129ee3ee957c825e0a91a61e97993"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be called regularly to keep connection between client and server alive and to process incoming messages.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#aa08129ee3ee957c825e0a91a61e97993">Més...</a><br /></td></tr>
<tr class="separator:aa08129ee3ee957c825e0a91a61e97993"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fffdb1eda49e68bf205c17c99d8b217"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9fffdb1eda49e68bf205c17c99d8b217">SendAcksOnly</a> ()</td></tr>
<tr class="memdesc:a9fffdb1eda49e68bf205c17c99d8b217"><td class="mdescLeft">&#160;</td><td class="mdescRight">Obsolete: Better use UseBackgroundWorkerForSending and <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aa08129ee3ee957c825e0a91a61e97993" title="Must be called regularly to keep connection between client and server alive and to process incoming m...">Service()</a>.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9fffdb1eda49e68bf205c17c99d8b217">Més...</a><br /></td></tr>
<tr class="separator:a9fffdb1eda49e68bf205c17c99d8b217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eac49b1efa140099bd95f95df3cc8c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9eac49b1efa140099bd95f95df3cc8c2">Disconnect</a> (<a class="el" href="namespace_photon_1_1_chat.xhtml#ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</a> cause=<a class="el" href="namespace_photon_1_1_chat.xhtml#ae62af83eed801a62ffbe6bd2fcdd454ea8b87ea0f6c00718bace24e4c4f616d84">ChatDisconnectCause.DisconnectByClientLogic</a>)</td></tr>
<tr class="memdesc:a9eac49b1efa140099bd95f95df3cc8c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disconnects from the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server by sending a "disconnect command", which prevents a timeout server-side.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9eac49b1efa140099bd95f95df3cc8c2">Més...</a><br /></td></tr>
<tr class="separator:a9eac49b1efa140099bd95f95df3cc8c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e3cc4c17ac091055422d6f21dd59818"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a7e3cc4c17ac091055422d6f21dd59818">StopThread</a> ()</td></tr>
<tr class="memdesc:a7e3cc4c17ac091055422d6f21dd59818"><td class="mdescLeft">&#160;</td><td class="mdescRight">Locally shuts down the connection to the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a7e3cc4c17ac091055422d6f21dd59818">Més...</a><br /></td></tr>
<tr class="separator:a7e3cc4c17ac091055422d6f21dd59818"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe55a18070d332c5cad63a884d6a1242"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#abe55a18070d332c5cad63a884d6a1242">Subscribe</a> (string[] channels)</td></tr>
<tr class="memdesc:abe55a18070d332c5cad63a884d6a1242"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends operation to subscribe to a list of channels by name.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#abe55a18070d332c5cad63a884d6a1242">Més...</a><br /></td></tr>
<tr class="separator:abe55a18070d332c5cad63a884d6a1242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9443c39e4fde86cbfe6e2687642d3f79"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9443c39e4fde86cbfe6e2687642d3f79">Subscribe</a> (string[] channels, int[] lastMsgIds)</td></tr>
<tr class="memdesc:a9443c39e4fde86cbfe6e2687642d3f79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends operation to subscribe to a list of channels by name and possibly retrieve messages we did not receive while unsubscribed.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9443c39e4fde86cbfe6e2687642d3f79">Més...</a><br /></td></tr>
<tr class="separator:a9443c39e4fde86cbfe6e2687642d3f79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34ca1fde36c382177f9941c70402e5d7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a34ca1fde36c382177f9941c70402e5d7">Subscribe</a> (string[] channels, int messagesFromHistory)</td></tr>
<tr class="memdesc:a34ca1fde36c382177f9941c70402e5d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends operation to subscribe client to channels, optionally fetching a number of messages from the cache.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a34ca1fde36c382177f9941c70402e5d7">Més...</a><br /></td></tr>
<tr class="separator:a34ca1fde36c382177f9941c70402e5d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a107f60bcc98b3ed19922d3222f7a32b7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a107f60bcc98b3ed19922d3222f7a32b7">Unsubscribe</a> (string[] channels)</td></tr>
<tr class="memdesc:a107f60bcc98b3ed19922d3222f7a32b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unsubscribes from a list of channels, which stops getting messages from those.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a107f60bcc98b3ed19922d3222f7a32b7">Més...</a><br /></td></tr>
<tr class="separator:a107f60bcc98b3ed19922d3222f7a32b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afefc5d6f79d10d6d755669d14eee9c12"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#afefc5d6f79d10d6d755669d14eee9c12">PublishMessage</a> (string channelName, object message, bool forwardAsWebhook=false)</td></tr>
<tr class="memdesc:afefc5d6f79d10d6d755669d14eee9c12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends a message to a public channel which this client subscribed to.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#afefc5d6f79d10d6d755669d14eee9c12">Més...</a><br /></td></tr>
<tr class="separator:afefc5d6f79d10d6d755669d14eee9c12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad50dca47b8149b0952746af0fe25dad2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ad50dca47b8149b0952746af0fe25dad2">SendPrivateMessage</a> (string target, object message, bool forwardAsWebhook=false)</td></tr>
<tr class="memdesc:ad50dca47b8149b0952746af0fe25dad2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends a private message to a single target user.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#ad50dca47b8149b0952746af0fe25dad2">Més...</a><br /></td></tr>
<tr class="separator:ad50dca47b8149b0952746af0fe25dad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af667c9375be0cfdd9d626c24f1bb4deb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#af667c9375be0cfdd9d626c24f1bb4deb">SendPrivateMessage</a> (string target, object message, bool encrypt, bool forwardAsWebhook)</td></tr>
<tr class="memdesc:af667c9375be0cfdd9d626c24f1bb4deb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends a private message to a single target user.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#af667c9375be0cfdd9d626c24f1bb4deb">Més...</a><br /></td></tr>
<tr class="separator:af667c9375be0cfdd9d626c24f1bb4deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d5755dc7972e0a68cf51863ff2d6ed1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a0d5755dc7972e0a68cf51863ff2d6ed1">SetOnlineStatus</a> (int status)</td></tr>
<tr class="memdesc:a0d5755dc7972e0a68cf51863ff2d6ed1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the user's status without changing your status-message.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a0d5755dc7972e0a68cf51863ff2d6ed1">Més...</a><br /></td></tr>
<tr class="separator:a0d5755dc7972e0a68cf51863ff2d6ed1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac910645633b86071da9f1bb928b42243"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ac910645633b86071da9f1bb928b42243">SetOnlineStatus</a> (int status, object message)</td></tr>
<tr class="memdesc:ac910645633b86071da9f1bb928b42243"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the user's status without changing your status-message.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#ac910645633b86071da9f1bb928b42243">Més...</a><br /></td></tr>
<tr class="separator:ac910645633b86071da9f1bb928b42243"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03179eafc39116476b13ebd68ae43b58"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a03179eafc39116476b13ebd68ae43b58">AddFriends</a> (string[] friends)</td></tr>
<tr class="memdesc:a03179eafc39116476b13ebd68ae43b58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds friends to a list on the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server which will send you status updates for those.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a03179eafc39116476b13ebd68ae43b58">Més...</a><br /></td></tr>
<tr class="separator:a03179eafc39116476b13ebd68ae43b58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dc5c47ec3c216142d3dcdf6b5a5e1a0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9dc5c47ec3c216142d3dcdf6b5a5e1a0">RemoveFriends</a> (string[] friends)</td></tr>
<tr class="memdesc:a9dc5c47ec3c216142d3dcdf6b5a5e1a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the provided entries from the list on the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server and stops their status updates.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9dc5c47ec3c216142d3dcdf6b5a5e1a0">Més...</a><br /></td></tr>
<tr class="separator:a9dc5c47ec3c216142d3dcdf6b5a5e1a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1feb7b68f1125ecd4a5c1994767a8ce"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ab1feb7b68f1125ecd4a5c1994767a8ce">GetPrivateChannelNameByUser</a> (string userName)</td></tr>
<tr class="memdesc:ab1feb7b68f1125ecd4a5c1994767a8ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get you the (locally used) channel name for the chat between this client and another user.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#ab1feb7b68f1125ecd4a5c1994767a8ce">Més...</a><br /></td></tr>
<tr class="separator:ab1feb7b68f1125ecd4a5c1994767a8ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dd578fb1b7cbbebcbe28a95187bb85e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a5dd578fb1b7cbbebcbe28a95187bb85e">TryGetChannel</a> (string channelName, bool isPrivate, out <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a> channel)</td></tr>
<tr class="memdesc:a5dd578fb1b7cbbebcbe28a95187bb85e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simplified access to either private or public channels by name.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a5dd578fb1b7cbbebcbe28a95187bb85e">Més...</a><br /></td></tr>
<tr class="separator:a5dd578fb1b7cbbebcbe28a95187bb85e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e6a8762289fd86be605bef46d67018d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a5e6a8762289fd86be605bef46d67018d">TryGetChannel</a> (string channelName, out <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a> channel)</td></tr>
<tr class="memdesc:a5e6a8762289fd86be605bef46d67018d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simplified access to all channels by name.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a5e6a8762289fd86be605bef46d67018d">Més...</a><br /></td></tr>
<tr class="separator:a5e6a8762289fd86be605bef46d67018d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9f150401be83cd00b7061fe04a07456"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#af9f150401be83cd00b7061fe04a07456">TryGetPrivateChannelByUser</a> (string userId, out <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a> channel)</td></tr>
<tr class="memdesc:af9f150401be83cd00b7061fe04a07456"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simplified access to private channels by target user.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#af9f150401be83cd00b7061fe04a07456">Més...</a><br /></td></tr>
<tr class="separator:af9f150401be83cd00b7061fe04a07456"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f1ee1bc79ae06278ad7229706441141"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a0f1ee1bc79ae06278ad7229706441141">Subscribe</a> (string channel, int lastMsgId=0, int messagesFromHistory=-1, <a class="el" href="class_photon_1_1_chat_1_1_channel_creation_options.xhtml">ChannelCreationOptions</a> creationOptions=null)</td></tr>
<tr class="memdesc:a0f1ee1bc79ae06278ad7229706441141"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subscribe to a single channel and optionally sets its well-know channel properties in case the channel is created.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a0f1ee1bc79ae06278ad7229706441141">Més...</a><br /></td></tr>
<tr class="separator:a0f1ee1bc79ae06278ad7229706441141"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Atributs Públics</h2></td></tr>
<tr class="memitem:a145da05ec4438bf37eb12603459b66b5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a145da05ec4438bf37eb12603459b66b5">MessageLimit</a></td></tr>
<tr class="memdesc:a145da05ec4438bf37eb12603459b66b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">If greater than 0, new channels will limit the number of messages they cache locally.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a145da05ec4438bf37eb12603459b66b5">Més...</a><br /></td></tr>
<tr class="separator:a145da05ec4438bf37eb12603459b66b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7097434874100e46b581916dbba5ced1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a7097434874100e46b581916dbba5ced1">PrivateChatHistoryLength</a> = -1</td></tr>
<tr class="memdesc:a7097434874100e46b581916dbba5ced1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Limits the number of messages from private channel histories.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a7097434874100e46b581916dbba5ced1">Més...</a><br /></td></tr>
<tr class="separator:a7097434874100e46b581916dbba5ced1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83932af87d8d3a71deb04cda9c7961c0"><td class="memItemLeft" align="right" valign="top">readonly Dictionary&lt; string, <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a83932af87d8d3a71deb04cda9c7961c0">PublicChannels</a></td></tr>
<tr class="memdesc:a83932af87d8d3a71deb04cda9c7961c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public channels this client is subscribed to.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a83932af87d8d3a71deb04cda9c7961c0">Més...</a><br /></td></tr>
<tr class="separator:a83932af87d8d3a71deb04cda9c7961c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a595d3160ff5fa3ba96ec5c972ad8528b"><td class="memItemLeft" align="right" valign="top">readonly Dictionary&lt; string, <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a595d3160ff5fa3ba96ec5c972ad8528b">PrivateChannels</a></td></tr>
<tr class="memdesc:a595d3160ff5fa3ba96ec5c972ad8528b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private channels in which this client has exchanged messages.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a595d3160ff5fa3ba96ec5c972ad8528b">Més...</a><br /></td></tr>
<tr class="separator:a595d3160ff5fa3ba96ec5c972ad8528b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8e65e153d95d5ba0378393fd39e1a1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_photon_1_1_chat_1_1_chat_peer.xhtml">ChatPeer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#af8e65e153d95d5ba0378393fd39e1a1e">chatPeer</a> = null</td></tr>
<tr class="memdesc:af8e65e153d95d5ba0378393fd39e1a1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Peer used by this client.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#af8e65e153d95d5ba0378393fd39e1a1e">Més...</a><br /></td></tr>
<tr class="separator:af8e65e153d95d5ba0378393fd39e1a1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Atributs Públics Estàtics</h2></td></tr>
<tr class="memitem:ac37c92ca11e06427a261abde9809ce3f"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ac37c92ca11e06427a261abde9809ce3f">DefaultMaxSubscribers</a> = 100</td></tr>
<tr class="memdesc:ac37c92ca11e06427a261abde9809ce3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default maximum value possible for <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml#a458b3f57d85acd8d6c775828bdd78d00" title="Maximum number of channel subscribers. 0 means infinite.">ChatChannel.MaxSubscribers</a> when <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml#a67ecb9b6dfcd34e0c761f571a642d8fe" title="Whether or not this channel keeps track of the list of its subscribers.">ChatChannel.PublishSubscribers</a> is enabled  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#ac37c92ca11e06427a261abde9809ce3f">Més...</a><br /></td></tr>
<tr class="separator:ac37c92ca11e06427a261abde9809ce3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="properties"></a>
Propietats</h2></td></tr>
<tr class="memitem:a0299296d1acde3271523056464c0ac11"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a0299296d1acde3271523056464c0ac11">EnableProtocolFallback</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a0299296d1acde3271523056464c0ac11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables a fallback to another protocol in case a connect to the Name Server fails.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a0299296d1acde3271523056464c0ac11">Més...</a><br /></td></tr>
<tr class="separator:a0299296d1acde3271523056464c0ac11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd09983e6a7c5f77386068daea5c1e5e"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#acd09983e6a7c5f77386068daea5c1e5e">NameServerAddress</a><code> [get, private set]</code></td></tr>
<tr class="memdesc:acd09983e6a7c5f77386068daea5c1e5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The address of last connected Name Server.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#acd09983e6a7c5f77386068daea5c1e5e">Més...</a><br /></td></tr>
<tr class="separator:acd09983e6a7c5f77386068daea5c1e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a586cbe47663c00ba006c4b1fca8973fc"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a586cbe47663c00ba006c4b1fca8973fc">FrontendAddress</a><code> [get, private set]</code></td></tr>
<tr class="memdesc:a586cbe47663c00ba006c4b1fca8973fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The address of the actual chat server assigned from NameServer. Public for read only.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a586cbe47663c00ba006c4b1fca8973fc">Més...</a><br /></td></tr>
<tr class="separator:a586cbe47663c00ba006c4b1fca8973fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44a3e865b745b732bc02213a5388c1ea"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a44a3e865b745b732bc02213a5388c1ea">ChatRegion</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a44a3e865b745b732bc02213a5388c1ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settable only before you connect! Defaults to "EU".  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a44a3e865b745b732bc02213a5388c1ea">Més...</a><br /></td></tr>
<tr class="separator:a44a3e865b745b732bc02213a5388c1ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a433c87f11e648a9b24a44c0bcad5c6b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_photon_1_1_chat.xhtml#afc6e9ce1b2729658dbf7d583305c6c81">ChatState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a433c87f11e648a9b24a44c0bcad5c6b7">State</a><code> [get, private set]</code></td></tr>
<tr class="memdesc:a433c87f11e648a9b24a44c0bcad5c6b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Current state of the <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml" title="Central class of the Photon Chat API to connect, handle channels and messages.">ChatClient</a>. Also use CanChat.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a433c87f11e648a9b24a44c0bcad5c6b7">Més...</a><br /></td></tr>
<tr class="separator:a433c87f11e648a9b24a44c0bcad5c6b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af21defff503f937fec64ac09ec502b50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespace_photon_1_1_chat.xhtml#ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#af21defff503f937fec64ac09ec502b50">DisconnectedCause</a><code> [get, private set]</code></td></tr>
<tr class="memdesc:af21defff503f937fec64ac09ec502b50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disconnection cause. Check this inside <a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml#a8d918edf361f65d6ab749da04604b138" title="Disconnection happened.">IChatClientListener.OnDisconnected</a>.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#af21defff503f937fec64ac09ec502b50">Més...</a><br /></td></tr>
<tr class="separator:af21defff503f937fec64ac09ec502b50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24f7e37f078c3ea6d24b032a428e45b5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a24f7e37f078c3ea6d24b032a428e45b5">CanChat</a><code> [get]</code></td></tr>
<tr class="memdesc:a24f7e37f078c3ea6d24b032a428e45b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if this client is ready to send messages.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a24f7e37f078c3ea6d24b032a428e45b5">Més...</a><br /></td></tr>
<tr class="separator:a24f7e37f078c3ea6d24b032a428e45b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbc2467f75a7929daaf2905c29031139"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#adbc2467f75a7929daaf2905c29031139">HasPeer</a><code> [get]</code></td></tr>
<tr class="separator:adbc2467f75a7929daaf2905c29031139"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc7265160bf8f2697ae12f1fbe027eb3"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#adc7265160bf8f2697ae12f1fbe027eb3">AppVersion</a><code> [get, private set]</code></td></tr>
<tr class="memdesc:adc7265160bf8f2697ae12f1fbe027eb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">The version of your client. A new version also creates a new "virtual app" to separate players from older client versions.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#adc7265160bf8f2697ae12f1fbe027eb3">Més...</a><br /></td></tr>
<tr class="separator:adc7265160bf8f2697ae12f1fbe027eb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad90fda837d118577340199e9485bba84"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ad90fda837d118577340199e9485bba84">AppId</a><code> [get, private set]</code></td></tr>
<tr class="memdesc:ad90fda837d118577340199e9485bba84"><td class="mdescLeft">&#160;</td><td class="mdescRight">The AppID as assigned from the <a class="el" href="namespace_photon.xhtml">Photon</a> Cloud.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#ad90fda837d118577340199e9485bba84">Més...</a><br /></td></tr>
<tr class="separator:ad90fda837d118577340199e9485bba84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2883e249a1a3b89d2058f84105549a61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_photon_1_1_chat_1_1_authentication_values.xhtml">AuthenticationValues</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a2883e249a1a3b89d2058f84105549a61">AuthValues</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a2883e249a1a3b89d2058f84105549a61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Settable only before you connect!  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a2883e249a1a3b89d2058f84105549a61">Més...</a><br /></td></tr>
<tr class="separator:a2883e249a1a3b89d2058f84105549a61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe9eae1c888f8f58a32c4f3298038546"><td class="memItemLeft" align="right" valign="top">string?&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#abe9eae1c888f8f58a32c4f3298038546">UserId</a><code> [get, private set]</code></td></tr>
<tr class="memdesc:abe9eae1c888f8f58a32c4f3298038546"><td class="mdescLeft">&#160;</td><td class="mdescRight">The unique ID of a user/person, stored in AuthValues.UserId.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#abe9eae1c888f8f58a32c4f3298038546">Més...</a><br /></td></tr>
<tr class="separator:abe9eae1c888f8f58a32c4f3298038546"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a625d156affdbf51778ebf60a302df6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9a625d156affdbf51778ebf60a302df6">UseBackgroundWorkerForSending</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a9a625d156affdbf51778ebf60a302df6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines if a background thread will call SendOutgoingCommands, while your code calls Service to dispatch received messages.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9a625d156affdbf51778ebf60a302df6">Més...</a><br /></td></tr>
<tr class="separator:a9a625d156affdbf51778ebf60a302df6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a7d22fc0ccda0c61fff2cf9ffb798ff"><td class="memItemLeft" align="right" valign="top">ConnectionProtocol?&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a5a7d22fc0ccda0c61fff2cf9ffb798ff">TransportProtocol</a><code> [get, set]</code></td></tr>
<tr class="memdesc:a5a7d22fc0ccda0c61fff2cf9ffb798ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exposes the TransportProtocol of the used PhotonPeer. Settable while not connected.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a5a7d22fc0ccda0c61fff2cf9ffb798ff">Més...</a><br /></td></tr>
<tr class="separator:a5a7d22fc0ccda0c61fff2cf9ffb798ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a166f5011405a4a85e957ac2d1ea498"><td class="memItemLeft" align="right" valign="top">Dictionary&lt; ConnectionProtocol, Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a8a166f5011405a4a85e957ac2d1ea498">SocketImplementationConfig</a><code> [get]</code></td></tr>
<tr class="memdesc:a8a166f5011405a4a85e957ac2d1ea498"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines which IPhotonSocket class to use per ConnectionProtocol.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a8a166f5011405a4a85e957ac2d1ea498">Més...</a><br /></td></tr>
<tr class="separator:a8a166f5011405a4a85e957ac2d1ea498"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4333dbf23b2a561999bf4afc359617b"><td class="memItemLeft" align="right" valign="top">DebugLevel&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#af4333dbf23b2a561999bf4afc359617b">DebugOut</a><code> [get, set]</code></td></tr>
<tr class="memdesc:af4333dbf23b2a561999bf4afc359617b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the level (and amount) of debug output provided by the library.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#af4333dbf23b2a561999bf4afc359617b">Més...</a><br /></td></tr>
<tr class="separator:af4333dbf23b2a561999bf4afc359617b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Mètodes Privats</h2></td></tr>
<tr class="memitem:add96a4fe0e51460c5ef0b0d3da469bc3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#add96a4fe0e51460c5ef0b0d3da469bc3">SendOutgoingInBackground</a> ()</td></tr>
<tr class="memdesc:add96a4fe0e51460c5ef0b0d3da469bc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called by a separate thread, this sends outgoing commands of this peer, as long as it's connected.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#add96a4fe0e51460c5ef0b0d3da469bc3">Més...</a><br /></td></tr>
<tr class="separator:add96a4fe0e51460c5ef0b0d3da469bc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd054e64db59e580d97a817f99310e99"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#abd054e64db59e580d97a817f99310e99">publishMessage</a> (string channelName, object message, bool reliable, bool forwardAsWebhook=false)</td></tr>
<tr class="separator:abd054e64db59e580d97a817f99310e99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af43bd1ad8d9b455840d5d00265b20bb9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#af43bd1ad8d9b455840d5d00265b20bb9">sendPrivateMessage</a> (string target, object message, bool encrypt, bool reliable, bool forwardAsWebhook=false)</td></tr>
<tr class="separator:af43bd1ad8d9b455840d5d00265b20bb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4082838ff7355c23a7d92b02e8405efc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a4082838ff7355c23a7d92b02e8405efc">SetOnlineStatus</a> (int status, object message, bool skipMessage)</td></tr>
<tr class="memdesc:a4082838ff7355c23a7d92b02e8405efc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the user's status (pre-defined or custom) and an optional message.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#a4082838ff7355c23a7d92b02e8405efc">Més...</a><br /></td></tr>
<tr class="separator:a4082838ff7355c23a7d92b02e8405efc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe4e4cf5b16815e7f60f55b7d230483e"><td class="memItemLeft" align="right" valign="top">void IPhotonPeerListener.&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#afe4e4cf5b16815e7f60f55b7d230483e">DebugReturn</a> (DebugLevel level, string message)</td></tr>
<tr class="separator:afe4e4cf5b16815e7f60f55b7d230483e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6040c42c7364e2488514bd79383213d9"><td class="memItemLeft" align="right" valign="top">void IPhotonPeerListener.&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a6040c42c7364e2488514bd79383213d9">OnEvent</a> (EventData eventData)</td></tr>
<tr class="separator:a6040c42c7364e2488514bd79383213d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa6375e40c2b85a51b3d989cb46cc4b"><td class="memItemLeft" align="right" valign="top">void IPhotonPeerListener.&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a6fa6375e40c2b85a51b3d989cb46cc4b">OnOperationResponse</a> (OperationResponse operationResponse)</td></tr>
<tr class="separator:a6fa6375e40c2b85a51b3d989cb46cc4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4a59688bc7fd4ced31ef2d68f552c40"><td class="memItemLeft" align="right" valign="top">void IPhotonPeerListener.&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#af4a59688bc7fd4ced31ef2d68f552c40">OnStatusChanged</a> (StatusCode statusCode)</td></tr>
<tr class="separator:af4a59688bc7fd4ced31ef2d68f552c40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ca62421358371f177157f7340713e91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a2ca62421358371f177157f7340713e91">TryAuthenticateOnNameServer</a> ()</td></tr>
<tr class="separator:a2ca62421358371f177157f7340713e91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0413525517b1e67ed1818f262fe92a5e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a0413525517b1e67ed1818f262fe92a5e">SendChannelOperation</a> (string[] channels, byte operation, int historyLength)</td></tr>
<tr class="separator:a0413525517b1e67ed1818f262fe92a5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a4f71c23e6893b6ed7b64ae1715c177"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a7a4f71c23e6893b6ed7b64ae1715c177">HandlePrivateMessageEvent</a> (EventData eventData)</td></tr>
<tr class="separator:a7a4f71c23e6893b6ed7b64ae1715c177"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ea25391a52a306adc08cabd928becc3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a8ea25391a52a306adc08cabd928becc3">HandleChatMessagesEvent</a> (EventData eventData)</td></tr>
<tr class="separator:a8ea25391a52a306adc08cabd928becc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16dde8462bf480197026133d168adcda"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a16dde8462bf480197026133d168adcda">HandleSubscribeEvent</a> (EventData eventData)</td></tr>
<tr class="separator:a16dde8462bf480197026133d168adcda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a231b0ce90f39ead85cb27bcf77184b01"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a231b0ce90f39ead85cb27bcf77184b01">HandleUnsubscribeEvent</a> (EventData eventData)</td></tr>
<tr class="separator:a231b0ce90f39ead85cb27bcf77184b01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a427aacde5ff51e6593888ffd12827cb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a427aacde5ff51e6593888ffd12827cb3">HandleAuthResponse</a> (OperationResponse operationResponse)</td></tr>
<tr class="separator:a427aacde5ff51e6593888ffd12827cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abacc7a03514cd92c694540ed80b7b146"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#abacc7a03514cd92c694540ed80b7b146">HandleStatusUpdate</a> (EventData eventData)</td></tr>
<tr class="separator:abacc7a03514cd92c694540ed80b7b146"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8b24c8d99ef4691becf5e7d7e2bf0b8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aa8b24c8d99ef4691becf5e7d7e2bf0b8">ConnectToFrontEnd</a> ()</td></tr>
<tr class="separator:aa8b24c8d99ef4691becf5e7d7e2bf0b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a021fb122f4ed3a4dccaa6d5583a85c22"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a021fb122f4ed3a4dccaa6d5583a85c22">AuthenticateOnFrontEnd</a> ()</td></tr>
<tr class="separator:a021fb122f4ed3a4dccaa6d5583a85c22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afeea2f5182c79f4d70613f4bcb42e49b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#afeea2f5182c79f4d70613f4bcb42e49b">HandleUserUnsubscribedEvent</a> (EventData eventData)</td></tr>
<tr class="separator:afeea2f5182c79f4d70613f4bcb42e49b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad904338de0cf5bd965029ca3625d5dbf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ad904338de0cf5bd965029ca3625d5dbf">HandleUserSubscribedEvent</a> (EventData eventData)</td></tr>
<tr class="separator:ad904338de0cf5bd965029ca3625d5dbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Atributs Privats</h2></td></tr>
<tr class="memitem:aa3283c94a99aed6c09a956a8b93cf114"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aa3283c94a99aed6c09a956a8b93cf114">chatRegion</a> = &quot;EU&quot;</td></tr>
<tr class="memdesc:aa3283c94a99aed6c09a956a8b93cf114"><td class="mdescLeft">&#160;</td><td class="mdescRight">Region used to connect to. Currently all chat is done in EU. It can make sense to use only one region for the whole game.  <a href="class_photon_1_1_chat_1_1_chat_client.xhtml#aa3283c94a99aed6c09a956a8b93cf114">Més...</a><br /></td></tr>
<tr class="separator:aa3283c94a99aed6c09a956a8b93cf114"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd7015c98c33f037ca7f7c9a3443ffc4"><td class="memItemLeft" align="right" valign="top">readonly HashSet&lt; string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#afd7015c98c33f037ca7f7c9a3443ffc4">PublicChannelsUnsubscribing</a></td></tr>
<tr class="separator:afd7015c98c33f037ca7f7c9a3443ffc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee0af5e31e332be4b4f3bb723f558aa9"><td class="memItemLeft" align="right" valign="top">readonly <a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml">IChatClientListener</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aee0af5e31e332be4b4f3bb723f558aa9">listener</a> = null</td></tr>
<tr class="separator:aee0af5e31e332be4b4f3bb723f558aa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aada90cf9a335670c3810b4d1365b832c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aada90cf9a335670c3810b4d1365b832c">didAuthenticate</a></td></tr>
<tr class="separator:aada90cf9a335670c3810b4d1365b832c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8af461f901a7f3b8eddd3731d6b95cf4"><td class="memItemLeft" align="right" valign="top">int?&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a8af461f901a7f3b8eddd3731d6b95cf4">statusToSetWhenConnected</a></td></tr>
<tr class="separator:a8af461f901a7f3b8eddd3731d6b95cf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac63937c8dd37e3c18053d1cf02a8c8ad"><td class="memItemLeft" align="right" valign="top">object&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ac63937c8dd37e3c18053d1cf02a8c8ad">messageToSetWhenConnected</a></td></tr>
<tr class="separator:ac63937c8dd37e3c18053d1cf02a8c8ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a456491d7456542df1bda2eb858682cee"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a456491d7456542df1bda2eb858682cee">msDeltaForServiceCalls</a> = 50</td></tr>
<tr class="separator:a456491d7456542df1bda2eb858682cee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9134717123e2ab8641c284dd6152e45b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a9134717123e2ab8641c284dd6152e45b">msTimestampOfLastServiceCall</a></td></tr>
<tr class="separator:a9134717123e2ab8641c284dd6152e45b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-attribs"></a>
Atributs Privats Estàtics</h2></td></tr>
<tr class="memitem:acceaf28552483beba377dae782637824"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#acceaf28552483beba377dae782637824">FriendRequestListMax</a> = 1024</td></tr>
<tr class="separator:acceaf28552483beba377dae782637824"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a845beb33aab78ae0b4b1cad0f5b8fa04"><td class="memItemLeft" align="right" valign="top">const byte&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a845beb33aab78ae0b4b1cad0f5b8fa04">HttpForwardWebFlag</a> = 0x01</td></tr>
<tr class="separator:a845beb33aab78ae0b4b1cad0f5b8fa04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fd3e0396578e60e296f249dfce7b934"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#a3fd3e0396578e60e296f249dfce7b934">ChatAppName</a> = &quot;chat&quot;</td></tr>
<tr class="separator:a3fd3e0396578e60e296f249dfce7b934"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Descripció Detallada</h2>
<div class="textblock"><p>Central class of the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> API to connect, handle channels and messages. </p>
<p>This class must be instantiated with a <a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml" title="Callback interface for Chat client side.">IChatClientListener</a> instance to get the callbacks. Integrate it into your game loop by calling Service regularly. If the target platform supports Threads/Tasks, set UseBackgroundWorkerForSending = true, to let the <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml" title="Central class of the Photon Chat API to connect, handle channels and messages.">ChatClient</a> keep the connection by sending from an independent thread.</p>
<p>Call Connect with an AppId that is setup as <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> application. Note: Connect covers multiple messages between this client and the servers. A short workflow will connect you to a chat server.</p>
<p>Each <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml" title="Central class of the Photon Chat API to connect, handle channels and messages.">ChatClient</a> resembles a user in chat (set in Connect). Each user automatically subscribes a channel for incoming private messages and can message any other user privately. Before you publish messages in any non-private channel, that channel must be subscribed.</p>
<p>PublicChannels is a list of subscribed channels, containing messages and senders. PrivateChannels contains all incoming and sent private messages. </p>
</div><h2 class="groupheader">Documentació del Constructor i el Destructor</h2>
<a id="ab42b0bad653802e35481597091cc4c57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab42b0bad653802e35481597091cc4c57">&#9670;&nbsp;</a></span>ChatClient()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Photon.Chat.ChatClient.ChatClient </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml">IChatClientListener</a>&#160;</td>
          <td class="paramname"><em>listener</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ConnectionProtocol&#160;</td>
          <td class="paramname"><em>protocol</em> = <code>ConnectionProtocol.Udp</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> client constructor. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">listener</td><td>The chat listener implementation.</td></tr>
    <tr><td class="paramname">protocol</td><td>Connection protocol to be used by this client. Default is ConnectionProtocol.Udp.</td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Documentació de les Funcions Membre</h2>
<a id="a03179eafc39116476b13ebd68ae43b58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03179eafc39116476b13ebd68ae43b58">&#9670;&nbsp;</a></span>AddFriends()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.AddFriends </td>
          <td>(</td>
          <td class="paramtype">string[]&#160;</td>
          <td class="paramname"><em>friends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds friends to a list on the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server which will send you status updates for those. </p>
<p>AddFriends and RemoveFriends enable clients to handle their friend list in the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> server. Having users on your friends list gives you access to their current online status (and whatever info your client sets in it).</p>
<p>Each user can set an online status consisting of an integer and an arbitrary (serializable) object. The object can be null, Hashtable, object[] or anything else <a class="el" href="namespace_photon.xhtml">Photon</a> can serialize.</p>
<p>The status is published automatically to friends (anyone who set your user ID with AddFriends).</p>
<p><a class="el" href="namespace_photon.xhtml">Photon</a> flushes friends-list when a chat client disconnects, so it has to be set each time. If your community API gives you access to online status already, you could filter and set online friends in AddFriends.</p>
<p>Actual friend relations are not persistent and have to be stored outside of <a class="el" href="namespace_photon.xhtml">Photon</a>. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">friends</td><td>Array of friend userIds.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>If the operation could be sent.</dd></dl>

</div>
</div>
<a id="a021fb122f4ed3a4dccaa6d5583a85c22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a021fb122f4ed3a4dccaa6d5583a85c22">&#9670;&nbsp;</a></span>AuthenticateOnFrontEnd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.AuthenticateOnFrontEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9319494267567de368f56a737b643634"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9319494267567de368f56a737b643634">&#9670;&nbsp;</a></span>CanChatInChannel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.CanChatInChannel </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>channelName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks if this client is ready to publish messages inside a public channel. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channelName</td><td>The channel to do the check with.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>Whether or not this client is ready to publish messages inside the public channel with the specified channelName.</dd></dl>

</div>
</div>
<a id="a26295d698e9cea35b3e6411623c54ded"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26295d698e9cea35b3e6411623c54ded">&#9670;&nbsp;</a></span>Connect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.Connect </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>appVersion</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_photon_1_1_chat_1_1_authentication_values.xhtml">AuthenticationValues</a>&#160;</td>
          <td class="paramname"><em>authValues</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Connects this client to the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Cloud service, which will also authenticate the user (and set a UserId). </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>Get your <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> AppId from the <a href="https://dashboard.photonengine.com">Dashboard</a>.</td></tr>
    <tr><td class="paramname">appVersion</td><td>Any version string you make up. Used to separate users and variants of your clients, which might be incompatible.</td></tr>
    <tr><td class="paramname">authValues</td><td>Values for authentication. You can leave this null, if you set a UserId before. If you set authValues, they will override any UserId set before.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd></dd></dl>

</div>
</div>
<a id="ae8f7f17505875382395e1cc898c6ca61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8f7f17505875382395e1cc898c6ca61">&#9670;&nbsp;</a></span>ConnectAndSetStatus()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.ConnectAndSetStatus </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>appVersion</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_photon_1_1_chat_1_1_authentication_values.xhtml">AuthenticationValues</a>&#160;</td>
          <td class="paramname"><em>authValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>status</em> = <code><a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml#a5dd001713c1f5f001beaf278fa3978bb">ChatUserStatus.Online</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em> = <code>null</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Connects this client to the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Cloud service, which will also authenticate the user (and set a UserId). </p>
<p>This also sets an online status once connected. By default it will set user status to <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml#a5dd001713c1f5f001beaf278fa3978bb" title="(2) Online and available.">ChatUserStatus.Online</a>. See <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#ac910645633b86071da9f1bb928b42243" title="Sets the user&#39;s status without changing your status-message.">SetOnlineStatus(int,object)</a> for more information.</p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>Get your <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> AppId from the <a href="https://dashboard.photonengine.com">Dashboard</a>.</td></tr>
    <tr><td class="paramname">appVersion</td><td>Any version string you make up. Used to separate users and variants of your clients, which might be incompatible.</td></tr>
    <tr><td class="paramname">authValues</td><td>Values for authentication. You can leave this null, if you set a UserId before. If you set authValues, they will override any UserId set before.</td></tr>
    <tr><td class="paramname">status</td><td>User status to set when connected. Predefined states are in class <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml" title="Contains commonly used status values for SetOnlineStatus.">ChatUserStatus</a>. Other values can be used at will.</td></tr>
    <tr><td class="paramname">message</td><td>Optional status Also sets a status-message which your friends can get.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>If the connection attempt could be sent at all.</dd></dl>

</div>
</div>
<a id="aa8b24c8d99ef4691becf5e7d7e2bf0b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8b24c8d99ef4691becf5e7d7e2bf0b8">&#9670;&nbsp;</a></span>ConnectToFrontEnd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.ConnectToFrontEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a55a715b3029d0f17c1eb537960c7aa5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55a715b3029d0f17c1eb537960c7aa5b">&#9670;&nbsp;</a></span>ConnectUsingSettings()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.ConnectUsingSettings </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_photon_1_1_chat_1_1_chat_app_settings.xhtml">ChatAppSettings</a>&#160;</td>
          <td class="paramname"><em>appSettings</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afe4e4cf5b16815e7f60f55b7d230483e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe4e4cf5b16815e7f60f55b7d230483e">&#9670;&nbsp;</a></span>DebugReturn()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IPhotonPeerListener. Photon.Chat.ChatClient.DebugReturn </td>
          <td>(</td>
          <td class="paramtype">DebugLevel&#160;</td>
          <td class="paramname"><em>level</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9eac49b1efa140099bd95f95df3cc8c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9eac49b1efa140099bd95f95df3cc8c2">&#9670;&nbsp;</a></span>Disconnect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.Disconnect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespace_photon_1_1_chat.xhtml#ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</a>&#160;</td>
          <td class="paramname"><em>cause</em> = <code><a class="el" href="namespace_photon_1_1_chat.xhtml#ae62af83eed801a62ffbe6bd2fcdd454ea8b87ea0f6c00718bace24e4c4f616d84">ChatDisconnectCause.DisconnectByClientLogic</a></code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disconnects from the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server by sending a "disconnect command", which prevents a timeout server-side. </p>

</div>
</div>
<a id="ab1feb7b68f1125ecd4a5c1994767a8ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1feb7b68f1125ecd4a5c1994767a8ce">&#9670;&nbsp;</a></span>GetPrivateChannelNameByUser()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string Photon.Chat.ChatClient.GetPrivateChannelNameByUser </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>userName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get you the (locally used) channel name for the chat between this client and another user. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">userName</td><td>Remote user's name or UserId.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>The (locally used) channel name for a private channel.</dd></dl>
<p>Do not subscribe to this channel. Private channels do not need to be explicitly subscribed to. Use this for debugging purposes mainly.</p>

</div>
</div>
<a id="a427aacde5ff51e6593888ffd12827cb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a427aacde5ff51e6593888ffd12827cb3">&#9670;&nbsp;</a></span>HandleAuthResponse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandleAuthResponse </td>
          <td>(</td>
          <td class="paramtype">OperationResponse&#160;</td>
          <td class="paramname"><em>operationResponse</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8ea25391a52a306adc08cabd928becc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ea25391a52a306adc08cabd928becc3">&#9670;&nbsp;</a></span>HandleChatMessagesEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandleChatMessagesEvent </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7a4f71c23e6893b6ed7b64ae1715c177"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a4f71c23e6893b6ed7b64ae1715c177">&#9670;&nbsp;</a></span>HandlePrivateMessageEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandlePrivateMessageEvent </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abacc7a03514cd92c694540ed80b7b146"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abacc7a03514cd92c694540ed80b7b146">&#9670;&nbsp;</a></span>HandleStatusUpdate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandleStatusUpdate </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a16dde8462bf480197026133d168adcda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16dde8462bf480197026133d168adcda">&#9670;&nbsp;</a></span>HandleSubscribeEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandleSubscribeEvent </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a231b0ce90f39ead85cb27bcf77184b01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a231b0ce90f39ead85cb27bcf77184b01">&#9670;&nbsp;</a></span>HandleUnsubscribeEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandleUnsubscribeEvent </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad904338de0cf5bd965029ca3625d5dbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad904338de0cf5bd965029ca3625d5dbf">&#9670;&nbsp;</a></span>HandleUserSubscribedEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandleUserSubscribedEvent </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afeea2f5182c79f4d70613f4bcb42e49b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afeea2f5182c79f4d70613f4bcb42e49b">&#9670;&nbsp;</a></span>HandleUserUnsubscribedEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.HandleUserUnsubscribedEvent </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6040c42c7364e2488514bd79383213d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6040c42c7364e2488514bd79383213d9">&#9670;&nbsp;</a></span>OnEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IPhotonPeerListener. Photon.Chat.ChatClient.OnEvent </td>
          <td>(</td>
          <td class="paramtype">EventData&#160;</td>
          <td class="paramname"><em>eventData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6fa6375e40c2b85a51b3d989cb46cc4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fa6375e40c2b85a51b3d989cb46cc4b">&#9670;&nbsp;</a></span>OnOperationResponse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IPhotonPeerListener. Photon.Chat.ChatClient.OnOperationResponse </td>
          <td>(</td>
          <td class="paramtype">OperationResponse&#160;</td>
          <td class="paramname"><em>operationResponse</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af4a59688bc7fd4ced31ef2d68f552c40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4a59688bc7fd4ced31ef2d68f552c40">&#9670;&nbsp;</a></span>OnStatusChanged()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IPhotonPeerListener. Photon.Chat.ChatClient.OnStatusChanged </td>
          <td>(</td>
          <td class="paramtype">StatusCode&#160;</td>
          <td class="paramname"><em>statusCode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="afefc5d6f79d10d6d755669d14eee9c12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afefc5d6f79d10d6d755669d14eee9c12">&#9670;&nbsp;</a></span>PublishMessage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.PublishMessage </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>channelName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forwardAsWebhook</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends a message to a public channel which this client subscribed to. </p>
<p>Before you publish to a channel, you have to subscribe it. Everyone in that channel will get the message. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channelName</td><td>Name of the channel to publish to.</td></tr>
    <tr><td class="paramname">message</td><td>Your message (string or any serializable data).</td></tr>
    <tr><td class="paramname">forwardAsWebhook</td><td>Optionally, public messages can be forwarded as webhooks. Configure webhooks for your <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> app to use this.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>False if the client is not yet ready to send messages.</dd></dl>

</div>
</div>
<a id="abd054e64db59e580d97a817f99310e99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd054e64db59e580d97a817f99310e99">&#9670;&nbsp;</a></span>publishMessage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.publishMessage </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>channelName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reliable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forwardAsWebhook</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9dc5c47ec3c216142d3dcdf6b5a5e1a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9dc5c47ec3c216142d3dcdf6b5a5e1a0">&#9670;&nbsp;</a></span>RemoveFriends()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.RemoveFriends </td>
          <td>(</td>
          <td class="paramtype">string[]&#160;</td>
          <td class="paramname"><em>friends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the provided entries from the list on the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server and stops their status updates. </p>
<p><a class="el" href="namespace_photon.xhtml">Photon</a> flushes friends-list when a chat client disconnects. Unless you want to remove individual entries, you don't have to RemoveFriends.</p>
<p>AddFriends and RemoveFriends enable clients to handle their friend list in the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> server. Having users on your friends list gives you access to their current online status (and whatever info your client sets in it).</p>
<p>Each user can set an online status consisting of an integer and an arbitratry (serializable) object. The object can be null, Hashtable, object[] or anything else <a class="el" href="namespace_photon.xhtml">Photon</a> can serialize.</p>
<p>The status is published automatically to friends (anyone who set your user ID with AddFriends).</p>
<p><a class="el" href="namespace_photon.xhtml">Photon</a> flushes friends-list when a chat client disconnects, so it has to be set each time. If your community API gives you access to online status already, you could filter and set online friends in AddFriends.</p>
<p>Actual friend relations are not persistent and have to be stored outside of <a class="el" href="namespace_photon.xhtml">Photon</a>.</p>
<p>AddFriends and RemoveFriends enable clients to handle their friend list in the <a class="el" href="namespace_photon.xhtml">Photon</a> <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> server. Having users on your friends list gives you access to their current online status (and whatever info your client sets in it).</p>
<p>Each user can set an online status consisting of an integer and an arbitratry (serializable) object. The object can be null, Hashtable, object[] or anything else <a class="el" href="namespace_photon.xhtml">Photon</a> can serialize.</p>
<p>The status is published automatically to friends (anyone who set your user ID with AddFriends).</p>
<p>Actual friend relations are not persistent and have to be stored outside of <a class="el" href="namespace_photon.xhtml">Photon</a>. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">friends</td><td>Array of friend userIds.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>If the operation could be sent.</dd></dl>

</div>
</div>
<a id="a9fffdb1eda49e68bf205c17c99d8b217"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fffdb1eda49e68bf205c17c99d8b217">&#9670;&nbsp;</a></span>SendAcksOnly()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.SendAcksOnly </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Obsolete: Better use UseBackgroundWorkerForSending and <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml#aa08129ee3ee957c825e0a91a61e97993" title="Must be called regularly to keep connection between client and server alive and to process incoming m...">Service()</a>. </p>

</div>
</div>
<a id="a0413525517b1e67ed1818f262fe92a5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0413525517b1e67ed1818f262fe92a5e">&#9670;&nbsp;</a></span>SendChannelOperation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.SendChannelOperation </td>
          <td>(</td>
          <td class="paramtype">string[]&#160;</td>
          <td class="paramname"><em>channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">byte&#160;</td>
          <td class="paramname"><em>operation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>historyLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="add96a4fe0e51460c5ef0b0d3da469bc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add96a4fe0e51460c5ef0b0d3da469bc3">&#9670;&nbsp;</a></span>SendOutgoingInBackground()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.SendOutgoingInBackground </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called by a separate thread, this sends outgoing commands of this peer, as long as it's connected. </p>
<dl class="section return"><dt>Retorna</dt><dd>True as long as the client is not disconnected.</dd></dl>

</div>
</div>
<a id="af667c9375be0cfdd9d626c24f1bb4deb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af667c9375be0cfdd9d626c24f1bb4deb">&#9670;&nbsp;</a></span>SendPrivateMessage() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.SendPrivateMessage </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>encrypt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forwardAsWebhook</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends a private message to a single target user. </p>
<p>Calls OnPrivateMessage on the receiving client.</p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>Username to send this message to.</td></tr>
    <tr><td class="paramname">message</td><td>The message you want to send. Can be a simple string or anything serializable.</td></tr>
    <tr><td class="paramname">encrypt</td><td>Optionally, private messages can be encrypted. Encryption is not end-to-end as the server decrypts the message.</td></tr>
    <tr><td class="paramname">forwardAsWebhook</td><td>Optionally, private messages can be forwarded as webhooks. Configure webhooks for your <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> app to use this.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if this clients can send the message to the server.</dd></dl>

</div>
</div>
<a id="af43bd1ad8d9b455840d5d00265b20bb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af43bd1ad8d9b455840d5d00265b20bb9">&#9670;&nbsp;</a></span>sendPrivateMessage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.sendPrivateMessage </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>encrypt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reliable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forwardAsWebhook</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad50dca47b8149b0952746af0fe25dad2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad50dca47b8149b0952746af0fe25dad2">&#9670;&nbsp;</a></span>SendPrivateMessage() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.SendPrivateMessage </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forwardAsWebhook</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends a private message to a single target user. </p>
<p>Calls OnPrivateMessage on the receiving client.</p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">target</td><td>Username to send this message to.</td></tr>
    <tr><td class="paramname">message</td><td>The message you want to send. Can be a simple string or anything serializable.</td></tr>
    <tr><td class="paramname">forwardAsWebhook</td><td>Optionally, private messages can be forwarded as webhooks. Configure webhooks for your <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> app to use this.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if this clients can send the message to the server.</dd></dl>

</div>
</div>
<a id="aa08129ee3ee957c825e0a91a61e97993"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa08129ee3ee957c825e0a91a61e97993">&#9670;&nbsp;</a></span>Service()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.Service </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Must be called regularly to keep connection between client and server alive and to process incoming messages. </p>
<p>This method limits the effort it does automatically using the private variable msDeltaForServiceCalls. That value is lower for connect and multiplied by 4 when chat-server connection is ready. </p>

</div>
</div>
<a id="a0d5755dc7972e0a68cf51863ff2d6ed1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d5755dc7972e0a68cf51863ff2d6ed1">&#9670;&nbsp;</a></span>SetOnlineStatus() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.SetOnlineStatus </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>status</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the user's status without changing your status-message. </p>
<p>The predefined status values can be found in class <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml" title="Contains commonly used status values for SetOnlineStatus.">ChatUserStatus</a>. State <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml#aa68c785d513085589c97caedd932cad1" title="(1) Be invisible to everyone. Sends no message.">ChatUserStatus.Invisible</a> will make you offline for everyone and send no message.</p>
<p>You can set custom values in the status integer. Aside from the pre-configured ones, all states will be considered visible and online. Else, no one would see the custom state.</p>
<p>This overload does not change the set message. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>Predefined states are in class <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml" title="Contains commonly used status values for SetOnlineStatus.">ChatUserStatus</a>. Other values can be used at will.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if the operation gets called on the server.</dd></dl>

</div>
</div>
<a id="ac910645633b86071da9f1bb928b42243"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac910645633b86071da9f1bb928b42243">&#9670;&nbsp;</a></span>SetOnlineStatus() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.SetOnlineStatus </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the user's status without changing your status-message. </p>
<p>The predefined status values can be found in class <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml" title="Contains commonly used status values for SetOnlineStatus.">ChatUserStatus</a>. State <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml#aa68c785d513085589c97caedd932cad1" title="(1) Be invisible to everyone. Sends no message.">ChatUserStatus.Invisible</a> will make you offline for everyone and send no message.</p>
<p>You can set custom values in the status integer. Aside from the pre-configured ones, all states will be considered visible and online. Else, no one would see the custom state.</p>
<p>The message object can be anything that <a class="el" href="namespace_photon.xhtml">Photon</a> can serialize, including (but not limited to) Hashtable, object[] and string. This value is defined by your own conventions. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>Predefined states are in class <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml" title="Contains commonly used status values for SetOnlineStatus.">ChatUserStatus</a>. Other values can be used at will.</td></tr>
    <tr><td class="paramname">message</td><td>Also sets a status-message which your friends can get.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if the operation gets called on the server.</dd></dl>

</div>
</div>
<a id="a4082838ff7355c23a7d92b02e8405efc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4082838ff7355c23a7d92b02e8405efc">&#9670;&nbsp;</a></span>SetOnlineStatus() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.SetOnlineStatus </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">object&#160;</td>
          <td class="paramname"><em>message</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>skipMessage</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the user's status (pre-defined or custom) and an optional message. </p>
<p>The predefined status values can be found in class <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml" title="Contains commonly used status values for SetOnlineStatus.">ChatUserStatus</a>. State <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml#aa68c785d513085589c97caedd932cad1" title="(1) Be invisible to everyone. Sends no message.">ChatUserStatus.Invisible</a> will make you offline for everyone and send no message.</p>
<p>You can set custom values in the status integer. Aside from the pre-configured ones, all states will be considered visible and online. Else, no one would see the custom state.</p>
<p>The message object can be anything that <a class="el" href="namespace_photon.xhtml">Photon</a> can serialize, including (but not limited to) Hashtable, object[] and string. This value is defined by your own conventions. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">status</td><td>Predefined states are in class <a class="el" href="class_photon_1_1_chat_1_1_chat_user_status.xhtml" title="Contains commonly used status values for SetOnlineStatus.">ChatUserStatus</a>. Other values can be used at will.</td></tr>
    <tr><td class="paramname">message</td><td>Optional string message or null.</td></tr>
    <tr><td class="paramname">skipMessage</td><td>If true, the message gets ignored. It can be null but won't replace any current message.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if the operation gets called on the server.</dd></dl>

</div>
</div>
<a id="a7e3cc4c17ac091055422d6f21dd59818"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e3cc4c17ac091055422d6f21dd59818">&#9670;&nbsp;</a></span>StopThread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.StopThread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Locally shuts down the connection to the <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server. </p>
<p>This resets states locally but the server will have to timeout this peer.</p>

</div>
</div>
<a id="a0f1ee1bc79ae06278ad7229706441141"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f1ee1bc79ae06278ad7229706441141">&#9670;&nbsp;</a></span>Subscribe() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.Subscribe </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>lastMsgId</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>messagesFromHistory</em> = <code>-1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_photon_1_1_chat_1_1_channel_creation_options.xhtml">ChannelCreationOptions</a>&#160;</td>
          <td class="paramname"><em>creationOptions</em> = <code>null</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Subscribe to a single channel and optionally sets its well-know channel properties in case the channel is created. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>name of the channel to subscribe to</td></tr>
    <tr><td class="paramname">lastMsgId</td><td>ID of the last received message from this channel when re subscribing to receive only missed messages, default is 0</td></tr>
    <tr><td class="paramname">messagesFromHistory</td><td>how many missed messages to receive from history, default is -1 (available history). 0 will get you no items. Positive values are capped by a server side limit.</td></tr>
    <tr><td class="paramname">creationOptions</td><td>options to be used in case the channel to subscribe to will be created.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd></dd></dl>

</div>
</div>
<a id="abe55a18070d332c5cad63a884d6a1242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe55a18070d332c5cad63a884d6a1242">&#9670;&nbsp;</a></span>Subscribe() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.Subscribe </td>
          <td>(</td>
          <td class="paramtype">string[]&#160;</td>
          <td class="paramname"><em>channels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends operation to subscribe to a list of channels by name. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channels</td><td>List of channels to subscribe to. Avoid null or empty values.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>If the operation could be sent at all (Example: Fails if not connected to <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server).</dd></dl>

</div>
</div>
<a id="a34ca1fde36c382177f9941c70402e5d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34ca1fde36c382177f9941c70402e5d7">&#9670;&nbsp;</a></span>Subscribe() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.Subscribe </td>
          <td>(</td>
          <td class="paramtype">string[]&#160;</td>
          <td class="paramname"><em>channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>messagesFromHistory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends operation to subscribe client to channels, optionally fetching a number of messages from the cache. </p>
<p>Subscribes channels will forward new messages to this user. Use PublishMessage to do so. The messages cache is limited but can be useful to get into ongoing conversations, if that's needed. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channels</td><td>List of channels to subscribe to. Avoid null or empty values.</td></tr>
    <tr><td class="paramname">messagesFromHistory</td><td>0: no history. 1 and higher: number of messages in history. -1: all available history.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>If the operation could be sent at all (Example: Fails if not connected to <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server).</dd></dl>

</div>
</div>
<a id="a9443c39e4fde86cbfe6e2687642d3f79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9443c39e4fde86cbfe6e2687642d3f79">&#9670;&nbsp;</a></span>Subscribe() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.Subscribe </td>
          <td>(</td>
          <td class="paramtype">string[]&#160;</td>
          <td class="paramname"><em>channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int[]&#160;</td>
          <td class="paramname"><em>lastMsgIds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends operation to subscribe to a list of channels by name and possibly retrieve messages we did not receive while unsubscribed. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channels</td><td>List of channels to subscribe to. Avoid null or empty values.</td></tr>
    <tr><td class="paramname">lastMsgIds</td><td>ID of last message received per channel. Useful when re subscribing to receive only messages we missed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>If the operation could be sent at all (Example: Fails if not connected to <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Server).</dd></dl>

</div>
</div>
<a id="a2ca62421358371f177157f7340713e91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ca62421358371f177157f7340713e91">&#9670;&nbsp;</a></span>TryAuthenticateOnNameServer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Photon.Chat.ChatClient.TryAuthenticateOnNameServer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5dd578fb1b7cbbebcbe28a95187bb85e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5dd578fb1b7cbbebcbe28a95187bb85e">&#9670;&nbsp;</a></span>TryGetChannel() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.TryGetChannel </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>channelName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isPrivate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">out <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a>&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simplified access to either private or public channels by name. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channelName</td><td>Name of the channel to get. For private channels, the channel-name is composed of both user's names.</td></tr>
    <tr><td class="paramname">isPrivate</td><td>Define if you expect a private or public channel.</td></tr>
    <tr><td class="paramname">channel</td><td>Out parameter gives you the found channel, if any.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if the channel was found.</dd></dl>
<p>Public channels exist only when subscribed to them. Private channels exist only when at least one message is exchanged with the target user privately.</p>

</div>
</div>
<a id="a5e6a8762289fd86be605bef46d67018d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e6a8762289fd86be605bef46d67018d">&#9670;&nbsp;</a></span>TryGetChannel() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.TryGetChannel </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>channelName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">out <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a>&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simplified access to all channels by name. </p>
<p>Checks public channels first, then private ones.</p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channelName</td><td>Name of the channel to get.</td></tr>
    <tr><td class="paramname">channel</td><td>Out parameter gives you the found channel, if any.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if the channel was found.</dd></dl>
<p>Public channels exist only when subscribed to them. Private channels exist only when at least one message is exchanged with the target user privately.</p>

</div>
</div>
<a id="af9f150401be83cd00b7061fe04a07456"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9f150401be83cd00b7061fe04a07456">&#9670;&nbsp;</a></span>TryGetPrivateChannelByUser()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.TryGetPrivateChannelByUser </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>userId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">out <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a>&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simplified access to private channels by target user. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">userId</td><td>UserId of the target user in the private channel.</td></tr>
    <tr><td class="paramname">channel</td><td>Out parameter gives you the found channel, if any.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>True if the channel was found.</dd></dl>

</div>
</div>
<a id="a107f60bcc98b3ed19922d3222f7a32b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a107f60bcc98b3ed19922d3222f7a32b7">&#9670;&nbsp;</a></span>Unsubscribe()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.Unsubscribe </td>
          <td>(</td>
          <td class="paramtype">string[]&#160;</td>
          <td class="paramname"><em>channels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unsubscribes from a list of channels, which stops getting messages from those. </p>
<p>The client will remove these channels from the PublicChannels dictionary once the server sent a response to this request.</p>
<p>The request will be sent to the server and <a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml#a54c546b010d3578316532d0af31ee183" title="Result of Unsubscribe operation.">IChatClientListener.OnUnsubscribed</a> gets called when the server actually removed the channel subscriptions.</p>
<p>Unsubscribe will fail if you include null or empty channel names. </p>
<dl class="params"><dt>Paràmetres</dt><dd>
  <table class="params">
    <tr><td class="paramname">channels</td><td>Names of channels to unsubscribe.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Retorna</dt><dd>False, if not connected to a chat server.</dd></dl>

</div>
</div>
<h2 class="groupheader">Documentació de les Dades Membre</h2>
<a id="a3fd3e0396578e60e296f249dfce7b934"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fd3e0396578e60e296f249dfce7b934">&#9670;&nbsp;</a></span>ChatAppName</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const string Photon.Chat.ChatClient.ChatAppName = &quot;chat&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af8e65e153d95d5ba0378393fd39e1a1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8e65e153d95d5ba0378393fd39e1a1e">&#9670;&nbsp;</a></span>chatPeer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_photon_1_1_chat_1_1_chat_peer.xhtml">ChatPeer</a> Photon.Chat.ChatClient.chatPeer = null</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The <a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a> Peer used by this client. </p>

</div>
</div>
<a id="aa3283c94a99aed6c09a956a8b93cf114"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3283c94a99aed6c09a956a8b93cf114">&#9670;&nbsp;</a></span>chatRegion</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string Photon.Chat.ChatClient.chatRegion = &quot;EU&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Region used to connect to. Currently all chat is done in EU. It can make sense to use only one region for the whole game. </p>

</div>
</div>
<a id="ac37c92ca11e06427a261abde9809ce3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac37c92ca11e06427a261abde9809ce3f">&#9670;&nbsp;</a></span>DefaultMaxSubscribers</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int Photon.Chat.ChatClient.DefaultMaxSubscribers = 100</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default maximum value possible for <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml#a458b3f57d85acd8d6c775828bdd78d00" title="Maximum number of channel subscribers. 0 means infinite.">ChatChannel.MaxSubscribers</a> when <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml#a67ecb9b6dfcd34e0c761f571a642d8fe" title="Whether or not this channel keeps track of the list of its subscribers.">ChatChannel.PublishSubscribers</a> is enabled </p>

</div>
</div>
<a id="aada90cf9a335670c3810b4d1365b832c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aada90cf9a335670c3810b4d1365b832c">&#9670;&nbsp;</a></span>didAuthenticate</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.didAuthenticate</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acceaf28552483beba377dae782637824"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acceaf28552483beba377dae782637824">&#9670;&nbsp;</a></span>FriendRequestListMax</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int Photon.Chat.ChatClient.FriendRequestListMax = 1024</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a845beb33aab78ae0b4b1cad0f5b8fa04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a845beb33aab78ae0b4b1cad0f5b8fa04">&#9670;&nbsp;</a></span>HttpForwardWebFlag</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const byte Photon.Chat.ChatClient.HttpForwardWebFlag = 0x01</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aee0af5e31e332be4b4f3bb723f558aa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee0af5e31e332be4b4f3bb723f558aa9">&#9670;&nbsp;</a></span>listener</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly <a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml">IChatClientListener</a> Photon.Chat.ChatClient.listener = null</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a145da05ec4438bf37eb12603459b66b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a145da05ec4438bf37eb12603459b66b5">&#9670;&nbsp;</a></span>MessageLimit</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Photon.Chat.ChatClient.MessageLimit</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If greater than 0, new channels will limit the number of messages they cache locally. </p>
<p>This can be useful to limit the amount of memory used by chats. You can set a MessageLimit per channel but this value gets applied to new ones.</p>
<p>Note: Changing this value, does not affect ChatChannels that are already in use! </p>

</div>
</div>
<a id="ac63937c8dd37e3c18053d1cf02a8c8ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac63937c8dd37e3c18053d1cf02a8c8ad">&#9670;&nbsp;</a></span>messageToSetWhenConnected</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">object Photon.Chat.ChatClient.messageToSetWhenConnected</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a456491d7456542df1bda2eb858682cee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a456491d7456542df1bda2eb858682cee">&#9670;&nbsp;</a></span>msDeltaForServiceCalls</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Photon.Chat.ChatClient.msDeltaForServiceCalls = 50</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9134717123e2ab8641c284dd6152e45b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9134717123e2ab8641c284dd6152e45b">&#9670;&nbsp;</a></span>msTimestampOfLastServiceCall</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Photon.Chat.ChatClient.msTimestampOfLastServiceCall</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a595d3160ff5fa3ba96ec5c972ad8528b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a595d3160ff5fa3ba96ec5c972ad8528b">&#9670;&nbsp;</a></span>PrivateChannels</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">readonly Dictionary&lt;string, <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a>&gt; Photon.Chat.ChatClient.PrivateChannels</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Private channels in which this client has exchanged messages. </p>

</div>
</div>
<a id="a7097434874100e46b581916dbba5ced1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7097434874100e46b581916dbba5ced1">&#9670;&nbsp;</a></span>PrivateChatHistoryLength</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Photon.Chat.ChatClient.PrivateChatHistoryLength = -1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Limits the number of messages from private channel histories. </p>
<p>This is applied to all private channels on reconnect, as there is no explicit re-joining private channels.<br  />
 Default is -1, which gets available messages up to a maximum set by the server.<br  />
 A value of 0 gets you zero messages.<br  />
 The server's limit of messages may be lower. If so, the server's value will overrule this.<br  />
 </p>

</div>
</div>
<a id="a83932af87d8d3a71deb04cda9c7961c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83932af87d8d3a71deb04cda9c7961c0">&#9670;&nbsp;</a></span>PublicChannels</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">readonly Dictionary&lt;string, <a class="el" href="class_photon_1_1_chat_1_1_chat_channel.xhtml">ChatChannel</a>&gt; Photon.Chat.ChatClient.PublicChannels</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Public channels this client is subscribed to. </p>

</div>
</div>
<a id="afd7015c98c33f037ca7f7c9a3443ffc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd7015c98c33f037ca7f7c9a3443ffc4">&#9670;&nbsp;</a></span>PublicChannelsUnsubscribing</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">readonly HashSet&lt;string&gt; Photon.Chat.ChatClient.PublicChannelsUnsubscribing</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8af461f901a7f3b8eddd3731d6b95cf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8af461f901a7f3b8eddd3731d6b95cf4">&#9670;&nbsp;</a></span>statusToSetWhenConnected</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int? Photon.Chat.ChatClient.statusToSetWhenConnected</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Documentació de les Propietats</h2>
<a id="ad90fda837d118577340199e9485bba84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad90fda837d118577340199e9485bba84">&#9670;&nbsp;</a></span>AppId</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string Photon.Chat.ChatClient.AppId</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The AppID as assigned from the <a class="el" href="namespace_photon.xhtml">Photon</a> Cloud. </p>

</div>
</div>
<a id="adc7265160bf8f2697ae12f1fbe027eb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc7265160bf8f2697ae12f1fbe027eb3">&#9670;&nbsp;</a></span>AppVersion</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string Photon.Chat.ChatClient.AppVersion</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The version of your client. A new version also creates a new "virtual app" to separate players from older client versions. </p>

</div>
</div>
<a id="a2883e249a1a3b89d2058f84105549a61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2883e249a1a3b89d2058f84105549a61">&#9670;&nbsp;</a></span>AuthValues</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_photon_1_1_chat_1_1_authentication_values.xhtml">AuthenticationValues</a> Photon.Chat.ChatClient.AuthValues</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Settable only before you connect! </p>

</div>
</div>
<a id="a24f7e37f078c3ea6d24b032a428e45b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24f7e37f078c3ea6d24b032a428e45b5">&#9670;&nbsp;</a></span>CanChat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.CanChat</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if this client is ready to send messages. </p>

</div>
</div>
<a id="a44a3e865b745b732bc02213a5388c1ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44a3e865b745b732bc02213a5388c1ea">&#9670;&nbsp;</a></span>ChatRegion</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string Photon.Chat.ChatClient.ChatRegion</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Settable only before you connect! Defaults to "EU". </p>

</div>
</div>
<a id="af4333dbf23b2a561999bf4afc359617b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4333dbf23b2a561999bf4afc359617b">&#9670;&nbsp;</a></span>DebugOut</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">DebugLevel Photon.Chat.ChatClient.DebugOut</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the level (and amount) of debug output provided by the library. </p>
<p>This affects the callbacks to <a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml#a4b905d8308b42d3da45d11193f928983" title="All debug output of the library will be reported through this method.">IChatClientListener.DebugReturn</a>. Default Level: Error. </p>

</div>
</div>
<a id="af21defff503f937fec64ac09ec502b50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af21defff503f937fec64ac09ec502b50">&#9670;&nbsp;</a></span>DisconnectedCause</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_photon_1_1_chat.xhtml#ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</a> Photon.Chat.ChatClient.DisconnectedCause</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disconnection cause. Check this inside <a class="el" href="interface_photon_1_1_chat_1_1_i_chat_client_listener.xhtml#a8d918edf361f65d6ab749da04604b138" title="Disconnection happened.">IChatClientListener.OnDisconnected</a>. </p>

</div>
</div>
<a id="a0299296d1acde3271523056464c0ac11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0299296d1acde3271523056464c0ac11">&#9670;&nbsp;</a></span>EnableProtocolFallback</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.EnableProtocolFallback</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables a fallback to another protocol in case a connect to the Name Server fails. </p>
<p>When connecting to the Name Server fails for a first time, the client will select an alternative network protocol and re-try to connect.</p>
<p>The fallback will use the default Name Server port as defined by ProtocolToNameServerPort.</p>
<p>The fallback for TCP is UDP. All other protocols fallback to TCP. </p>

</div>
</div>
<a id="a586cbe47663c00ba006c4b1fca8973fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a586cbe47663c00ba006c4b1fca8973fc">&#9670;&nbsp;</a></span>FrontendAddress</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string Photon.Chat.ChatClient.FrontendAddress</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The address of the actual chat server assigned from NameServer. Public for read only. </p>

</div>
</div>
<a id="adbc2467f75a7929daaf2905c29031139"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbc2467f75a7929daaf2905c29031139">&#9670;&nbsp;</a></span>HasPeer</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.HasPeer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acd09983e6a7c5f77386068daea5c1e5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd09983e6a7c5f77386068daea5c1e5e">&#9670;&nbsp;</a></span>NameServerAddress</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string Photon.Chat.ChatClient.NameServerAddress</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The address of last connected Name Server. </p>

</div>
</div>
<a id="a8a166f5011405a4a85e957ac2d1ea498"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a166f5011405a4a85e957ac2d1ea498">&#9670;&nbsp;</a></span>SocketImplementationConfig</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Dictionary&lt;ConnectionProtocol, Type&gt; Photon.Chat.ChatClient.SocketImplementationConfig</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Defines which IPhotonSocket class to use per ConnectionProtocol. </p>
<p>Several platforms have special Socket implementations and slightly different APIs. To accomodate this, switching the socket implementation for a network protocol was made available. By default, UDP and TCP have socket implementations assigned.</p>
<p>You only need to set the SocketImplementationConfig once, after creating a PhotonPeer and before connecting. If you switch the TransportProtocol, the correct implementation is being used. </p>

</div>
</div>
<a id="a433c87f11e648a9b24a44c0bcad5c6b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a433c87f11e648a9b24a44c0bcad5c6b7">&#9670;&nbsp;</a></span>State</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespace_photon_1_1_chat.xhtml#afc6e9ce1b2729658dbf7d583305c6c81">ChatState</a> Photon.Chat.ChatClient.State</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Current state of the <a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml" title="Central class of the Photon Chat API to connect, handle channels and messages.">ChatClient</a>. Also use CanChat. </p>

</div>
</div>
<a id="a5a7d22fc0ccda0c61fff2cf9ffb798ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a7d22fc0ccda0c61fff2cf9ffb798ff">&#9670;&nbsp;</a></span>TransportProtocol</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ConnectionProtocol? Photon.Chat.ChatClient.TransportProtocol</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Exposes the TransportProtocol of the used PhotonPeer. Settable while not connected. </p>

</div>
</div>
<a id="a9a625d156affdbf51778ebf60a302df6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a625d156affdbf51778ebf60a302df6">&#9670;&nbsp;</a></span>UseBackgroundWorkerForSending</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Photon.Chat.ChatClient.UseBackgroundWorkerForSending</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Defines if a background thread will call SendOutgoingCommands, while your code calls Service to dispatch received messages. </p>
<p>The benefit of using a background thread to call SendOutgoingCommands is this:</p>
<p>Even if your game logic is being paused, the background thread will keep the connection to the server up. On a lower level, acknowledgements and pings will prevent a server-side timeout while (e.g.) Unity loads assets.</p>
<p>Your game logic still has to call Service regularly, or else incoming messages are not dispatched. As this typically triggers UI updates, it's easier to call Service from the main/UI thread. </p>

</div>
</div>
<a id="abe9eae1c888f8f58a32c4f3298038546"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe9eae1c888f8f58a32c4f3298038546">&#9670;&nbsp;</a></span>UserId</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string? Photon.Chat.ChatClient.UserId</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">get</span><span class="mlabel">private set</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The unique ID of a user/person, stored in AuthValues.UserId. </p>
<p>Set it before you connect. </p>
<p>This value wraps AuthValues.UserId. It's not a nickname and we assume users with the same userID are the same person.</p>

</div>
</div>
<hr/>La documentació d'aquesta classe es va generar a partir del següent fitxer:<ul>
<li>F:/Unity Projects/Treball de Fi de Grau/Assets/Photon/PhotonChat/Code/<a class="el" href="_chat_client_8cs.xhtml">ChatClient.cs</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespace_photon.xhtml">Photon</a></li><li class="navelem"><a class="el" href="namespace_photon_1_1_chat.xhtml">Chat</a></li><li class="navelem"><a class="el" href="class_photon_1_1_chat_1_1_chat_client.xhtml">ChatClient</a></li>
    <li class="footer">Generat a Dg Jun 27 2021 02:07:14 per a Treball de Fi de Grau per <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
